{"version":3,"sources":["src/rotation_helper.js"],"names":[],"mappings":"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","file":"src/rotation_helper.js","sourcesContent":["define([\"three\", \"dist/mouse_to_world\"], function(THREE, MouseToWorld){\n    return {\n            epsilon: 0.000001,\n\n            rotateModelByQuaternion: function(model, rotate){\n                var currQuaternion = model.quaternion;\n                currQuaternion.multiplyQuaternions(rotate, currQuaternion);\n                currQuaternion.normalize();\n                model.setRotationFromQuaternion(currQuaternion);\n            },\n\n            /**\n             * Get the position of the mouse within the viewport rather than across the whole screen\n             */\n            actualPos: function(x, y, dim){\n                return new THREE.Vector2(x - dim.leftBound, y - dim.bottomBound);\n            },\n\n            sizeFor: function(dim){\n                var width = dim.rightBound - dim.leftBound,\n                    height = dim.topBound - dim.bottomBound;\n                return {width: width, height: height};\n            },\n\n            getRealPosition: function(mouseX, mouseY, dim, camera){\n                var actualPos = this.actualPos(mouseX, mouseY, dim),\n                    size = this.sizeFor(dim);\n                return MouseToWorld(actualPos.x, actualPos.y, size.width, size.height, camera);\n            },\n\n            checkWithinRange: function(val, min, max){\n                return val >= min && val <= max;\n            },\n\n            checkWithinFudge: function(val, fudgeFactor){\n                return this.checkWithinRange(val, -fudgeFactor, fudgeFactor);\n            },\n\n            axes: {\n                x: new THREE.Vector3(1,0,0),\n                y: new THREE.Vector3(0,1,0),\n                z: new THREE.Vector3(0,0,1)\n            },\n\n            snapToAxis: function(pos, axis){\n                var point = new THREE.Vector2(pos.x, pos.y);\n                if(axis == \"y\"){\n                    point.y = 0;\n                } else if(axis == \"x\") {\n                    point.x = 0;\n                } else {\n                    point.normalize(); \n                }\n                return point;\n            },\n\n            positiveAngle: function(angle){\n                if(Math.sign(angle) == -1){\n                    angle += Math.PI * 2;\n                }\n                return angle;\n            },\n\n            angleOfPointOnCircle: function(point){\n                if(point.x === 0){ // either pi/2 or 3*pi/2\n                    if(point.y > 0){\n                        return Math.PI/2;\n                    } else {\n                        return Math.PI*3/2;       \n                    }\n                } else {\n                    return Math.atan(point.y / point.x);\n                }\n            },\n\n            // TODO: separate into different functions\n            sliderAngle: function(point, initialPoint, axis, radius){\n                var angle = 0;\n                point = this.snapToAxis(point, axis);\n                initialPoint = this.snapToAxis(initialPoint, axis);\n                if(axis == \"x\" || axis == \"y\"){\n                    var otherAxis = {\n                        x: \"y\",\n                        y: \"x\"\n                    };\n                    var delta = (initialPoint[otherAxis[axis]] - point[otherAxis[axis]])/(radius*2);\n                    angle = this.positiveAngle(Math.PI * delta);\n                    if(axis == \"y\"){\n                        angle *= -1;\n                    }\n                } else {\n                    var startAngle = this.angleOfPointOnCircle(initialPoint),\n                        endAngle = this.angleOfPointOnCircle(point),\n                        sign = Math.sign(endAngle - startAngle),\n                        startPoint = new THREE.Vector3(initialPoint.x, initialPoint.y, 0),\n                        endPoint = new THREE.Vector3(point.x, point.y, 0),\n                        perp = new THREE.Vector3(),\n                        dir;\n                    perp.crossVectors(startPoint, endPoint);\n                    dir = Math.sign(perp.dot(new THREE.Vector3(0,0,1)));\n                    if(this.equal(startAngle, endAngle)){\n                        window.log.debug(\"No change in angle found, setting angle to zero\");\n                        angle = 0;\n                    } else {\n                        startPoint.normalize();\n                        endPoint.normalize();\n                        angle = Math.acos(startPoint.dot(endPoint));\n                        if(dir == -1){ // startAngle > endAngle => negative rotation\n                            angle *= -1;\n                        }\n                    }\n                }\n                if(!angle && angle !== 0){\n                    window.log.warn(\"Angle not a number! Setting to 0\");\n                    angle = 0;\n                }\n                return angle;\n            },\n\n            rotateByAxisAngle: function(model, axis, angle){\n                var quaternion = new THREE.Quaternion();\n                quaternion.setFromAxisAngle(axis, angle);\n                this.rotateModelByQuaternion(model, quaternion);\n            },\n\n            /**\n             * Create a quaternion which will rotate a model orientated along the first vector\n             * to be orientated along the second instead\n             */\n            rotateQuaternion: function(rotateStart, rotateEnd){\n                var axis = new THREE.Vector3(),\n                    rotate = new THREE.Quaternion(),\n                    angle = Math.acos(rotateStart.dot(rotateEnd) / rotateStart.length() / rotateEnd.length());\n                    if(angle){\n                        axis.crossVectors(rotateStart, rotateEnd).normalize();\n                        rotate.setFromAxisAngle(axis, angle);\n                    }\n                    return rotate;\n            },\n\n            /**\n             * Map the given position on a plane tangent to the sphere to a position on that sphere\n             */\n            mapToSphere: function(x, y, radius){\n                var pointOnSphere = new THREE.Vector3(x / radius, y / radius, 0),\n                    length = pointOnSphere.length();\n\n                if(length >= 1){\n                    pointOnSphere.normalize();\n                } else {\n                    pointOnSphere.z = Math.sqrt(1.0 - (length * length));\n                }\n                return pointOnSphere;\n            },\n\n            equal: function(a, b){\n                return this.checkWithinFudge(a - b, this.epsilon);\n            },\n    };\n});\n"]}