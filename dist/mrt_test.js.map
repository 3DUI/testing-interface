{"version":3,"sources":["src/mrt_test.js"],"names":[],"mappings":";;AAAA,MAAM,CAAC,CAAC,OAAO,EAAE,mBAAmB,EAAE,YAAY,CAAC,EAAE,UAAS,KAAK,EAAE,WAAW,EAAC,KAAK,EAAC;AACnF,WAAO,UAAS,QAAQ,EAAC;AACrB,YAAI,UAAU,GAAG,EAAE,GAAC,EAAE,GAAC,IAAI,CAAC;AAC5B,YAAI,OAAO,GAAG,EAAE,CAAC;AACjB,YAAI,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC;;;AACzB,0BAAc,EAAE,wBAAS,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAC;AACxC,uBAAO,CAAC,GAAG,GAAC,GAAG,GAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;aACnC;AACD,kBAAM,EAAE,kBAAU;AACd,oBAAI,IAAI,GAAG,IAAI,CAAC;AAChB,oBAAI,OAAO,GAAG,EAAE;oBACZ,SAAS,CAAC;;AAEd,qBAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAC;AACxB,2BAAO,CAAC,IAAI,CAAC,SAAS,GAAC,CAAC,GAAC,OAAO,CAAC,CAAC;iBACrC;AACD,yBAAS,GAAG,OAAO,CAAC,GAAG,CAAC,UAAS,GAAG,EAAE,CAAC,EAAC;AACtC,2BAAO,oBAAC,WAAW,IAAC,GAAG,EAAE,OAAO,GAAC,CAAC,AAAC,EAAC,GAAG,EAAE,CAAC,GAAC,CAAC,AAAC,EAAC,MAAM,EAAE,GAAG,AAAC,EAAC,cAAc,EAAE,IAAI,CAAC,cAAc,AAAC,EAAC,GAAG,EAAE,OAAO,GAAC,CAAC,AAAC,GAAE,CAAA;iBAClH,CAAC,CAAC;AACH,uBAAO;;sBAAK,EAAE,EAAC,SAAS,EAAC,SAAS,EAAC,WAAW;oBAC1C;;0BAAK,SAAS,EAAC,wCAAwC;wBACnD;;8BAAK,SAAS,EAAC,WAAW;4BACtB;;kCAAK,SAAS,EAAC,eAAe;gCACzB;;sCAAM,SAAS,EAAC,cAAc;;iCAAgB;6BAC7C;4BACN;;kCAAK,SAAS,EAAC,0BAA0B;gCACrC;;sCAAI,SAAS,EAAC,gBAAgB;oCAC1B;;;wCACC;;8CAAM,EAAE,EAAC,OAAO,EAAC,SAAS,EAAC,cAAc;;yCAAgB;qCACrD;iCACJ;6BACH;yBACJ;qBACJ;oBACL,SAAS;iBACR,CAAA;aACT;SACJ,CAAC,CAAC;;AAEH,aAAK,CAAC,MAAM,CACR,oBAAC,IAAI,OAAE,EACP,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CACrC,CAAC;;AAEF,YAAI,aAAa,GAAG,SAAhB,aAAa,GAAa;AAC1B,iBAAK,CAAC,sBAAsB,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;AACjE,kBAAM,CAAC,GAAG,CAAC,OAAO,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;AAChD,oBAAQ,EAAE,CAAC;SACd,CAAC;AACF,YAAI,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;AAC3D,aAAK,CAAC,KAAK,EAAE,CAAC;KACjB,CAAA;CACJ,CAAC,CAAC","file":"src/mrt_test.js","sourcesContent":["define([\"react\", \"dist/mrt_question\", \"dist/timer\"], function(React, MRTQuestion,Timer){\n    return function(callback){\n        var TEST_LIMIT = 10*60*1000;\n        var answers = {};\n        var Test = React.createClass({\n            selectedAnswer: function(qid, num, selected){\n                answers[qid+\"_\"+num] = selected;\n            },\n            render: function(){\n                var that = this;\n                var qImages = [],\n                    questions;\n\n                for(var i = 1; i <= 24; i++){\n                    qImages.push(\"images/\"+i+\"a.png\");\n                }\n                questions = qImages.map(function(src, i){\n                  return <MRTQuestion key={\"test_\"+i} num={i+1} imgSrc={src} selectedAnswer={that.selectedAnswer} qid={\"test_\"+i}/>  \n                });\n                return <div id=\"confirm\" className=\"container\">\n                    <nav className=\"navbar navbar-default navbar-fixed-top\">\n                        <div className=\"container\">\n                            <div className=\"navbar-header\">\n                                 <span className=\"navbar-brand\">MRT Test</span>\n                            </div>\n                            <div className=\"navbar-collapse collapse\">\n                                <ul className=\"nav navbar-nav\">\n                                    <li>\n                                     <span id=\"timer\" className=\"navbar-brand\">MRT Test</span>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </nav>\n                    {questions}\n                </div>\n            }\n        });\n\n        React.render(\n            <Test/>,\n            document.getElementById(\"content\")\n        );\n        \n        var timerCallback = function(){\n            React.unmountComponentAtNode(document.getElementById('content'));\n            window.log.saveLog(\"mrt test results\", answers);\n            callback();\n        };\n        var timer = new Timer(\"#timer\", TEST_LIMIT, timerCallback);\n        timer.start();\n    }\n});\n"]}